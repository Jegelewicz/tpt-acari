df$datasetID[i] <- "TPT"
}
}
# get accepted names
temp <- df[which(!is.na(df$acceptedNameUsageID)),] # get all rows with an accepted name ID
for (i in 1:nrow(temp)){
temp$acceptedNameUsage[i] <- vlookup(df$canonicalName,temp$acceptedNameUsageID[i],df$taxonID) # get canonical name of matching taxon ID
}
View(temp)
df <- df[which(is.na(df$acceptedNameUsageID)),] # remove rows with accepted name ID
for (i in 1:nrow(temp)){
temp$acceptedNameUsage[i] <- vlookup(df$canonicalName,temp$acceptedNameUsageID[i],df$taxonID) # get canonical name of matching taxon ID
}
df <- rbind(df,temp) # add back rows with accepted names
df <- GBIF[which(GBIF$genus != "Ixodes"),] # remove ticks
GBIF_origin <- df # keep original file for sanity check
tpt_dwc_template <- read_excel("input/tpt_dwc_template.xlsx") # read in TPT DarwinCore template
df <- rbindlist(list(df, tpt_dwc_template), fill = TRUE) # add all DwC columns
# ensure no NA in taxonomicStatus
for (i in 1:nrow(df)){
if (is.na(df$taxonomicStatus[i])) {
df$taxonomicStatus[i] <- "doubtful"
}
}
# add dataset for accepted taxa without one
for (i in 1:nrow(df)){
if (is.na(df$datasetID[i]) & df$taxonomicStatus[i] == "accepted") {
df$datasetID[i] <- "TPT"
}
}
# get accepted names
temp <- df[which(!is.na(df$acceptedNameUsageID)),] # get all rows with an accepted name ID
df <- df[which(is.na(df$acceptedNameUsageID)),] # remove rows with accepted name ID
for (i in 1:nrow(temp)){
temp$acceptedNameUsage[i] <- vlookup(df$canonicalName,temp$acceptedNameUsageID[i],df$taxonID) # get canonical name of matching taxon ID
}
df <- rbind(df,temp) # add back rows with accepted names
df_nodataset <- df[which(is.na(df$datasetID)),] # get taxa with no dataset ID
df_nodataset$reason <- "no dataset"
df <- df[which(!is.na(df$datasetID)),] # remove rows with no dataset ID
df_misapplied <- df[which(df$taxonomicStatus == "misapplied"),] # get taxa with taxonomic status of misapplied - what does that mean?
df_misapplied$reason <- "misapplied"
df <- df[which(df$taxonID %!in% df_misapplied$taxonID),] # remove rows with taxonomicStatus = misapplied - don't know how to treat
# check for duplicate names
df$reason <- c(ifelse(duplicated(df$scientificName, fromLast = TRUE)  | duplicated(df$scientificName),
"duplicate", NA)) # Flag internal dupes
df_dupes_review <- df[which(grepl('duplicate',df$reason) == TRUE), ]  # get duplicates for review
df <- df[which(grepl('duplicate',df$reason) == FALSE), ] # remove all dupes from working file
df_dupes_keep <- df_dupes_review[which(df_dupes_review$Dataset == "NEW"),]
df_dupes_keep <- df_dupes_keep[which(!duplicated(df_dupes_keep$canonicalName)),]
df_dupes <- df_dupes_review[which(df_dupes_review$taxonID %!in% df_dupes_keep$taxonID),]
df <- rbind(df, df_dupes_keep, fill=TRUE)
df_removed <- rbindlist(list(df_dupes, df_misapplied, df_nodataset), fill = TRUE)
df$source <- "GBIF"
# Do this after final review...
df_non_dwc <- subset(df, select = c(source, taxonID, Dataset, datasetID, genericName, reason)) # get all columns that are not DwC
# remove non DwC columns from working file
df$Dataset <- NULL
df$datasetID <- NULL
df$genericName <- NULL
df$reason <- NULL
# add subfamily column for consistency
df$subfamily <- NA
# order column names
# df[,c(1,2,3,4)]. Note the first comma means keep all the rows, and the 1,2,3,4 refers to the columns.
df <- df[,c("source",
"taxonID",
"scientificNameID",
"acceptedNameUsageID",
"parentNameUsageID",
"originalNameUsageID",
"nameAccordingToID",
"namePublishedInID",
"taxonConceptID",
"scientificName",
"acceptedNameUsage",
"parentNameUsage",
"originalNameUsage",
"nameAccordingTo",
"namePublishedIn",
"namePublishedInYear",
"higherClassification",
"kingdom",
"phylum",
"class",
"order",
"family",
"subfamily",
"genus",
"subgenus",
"specificEpithet",
"infraspecificEpithet",
"taxonRank",
"verbatimTaxonRank",
"scientificNameAuthorship",
"vernacularName",
"nomenclaturalCode",
"taxonomicStatus",
"nomenclaturalStatus",
"taxonRemarks",
"canonicalName"
)]
# sanity check
original <- nrow(GBIF_origin) # number of rows in cleaned file
final <- nrow(df) + nrow(df_removed) # number of rows in converted taxo file plus number of rows in higher taxa
if(original == final) {
write.csv(df,"~/GitHub/tpt-acari/output/GBIF_DwC.csv", row.names = FALSE) # write out transformed GBIF DwC
write.csv(df_removed,"~/GitHub/tpt-acari/output/GBIF_removed.csv", row.names = FALSE) # write out removed rows
write.csv(df_non_dwc,"~/GitHub/tpt-acari/output/GBIF_non_DwC.csv", row.names = FALSE) # write out removed rows
print("YAY")
} else {
print("rows are missing")
}
UMZM <- read.csv("~/GitHub/tpt-acari/output/Acari_DwC.csv", na = "NA") # read in cleaned Lewis review file
GBIF <- read.csv("~/GitHub/tpt-acari/output/GBIF_DwC.csv", na = "NA") # read in cleaned GBIF review file
View(UMZM)
# Names in sources other than UMZM
GBIF_not_UMZM <- GBIF[which(GBIF$canonicalName %!in% UMZM$canonicalName),]
df1 <- GBIF_not_UMZM # change dataframe name for ease of use
df2 <- GBIF_not_UMZM[which(GBIF_not_UMZM$canonicalName %!in% df1$canonicalName),] # if GBIF canonical is not in working file, get it
write.csv(df1,"~/GitHub/tpt-siphonaptera/output/Not in UMZM.csv", row.names = FALSE) # names not in Lewis
# UMZM names in sources other than UMZM
GBIF_in_UMZM <- GBIF[which(GBIF$canonicalName %in% UMZM$canonicalName),]
df <- UMZM # change dataframe name for ease of use
# if canonical is in GBIF, add the source
for (i in 1:nrow(df)){
if (df$canonicalName[i] %in% GBIF$canonicalName){
df$source[i] <- paste(df$source[i],"GBIF", sep = ", ")
}
}
write.csv(df,"~/GitHub/tpt-siphonaptera/output/in UMZM.csv", row.names = FALSE) # names in Lewis
rbind.fill(df,df1) # merge UMZM with GBIF
df <- rbind.fill(df,df1) # merge UMZM with GBIF
View(df)
UMZM_not_GBIF <- df[which(UMZM$canonicalName %!in% GBIF$canonicalName),] # get names in UMZM but not GBIF
UMZM_in_GBIF <- df[which(UMZM$canonicalName %in% GBIF$canonicalName),] # get names in UMZM and GBIF
GBIF_in_UMZM$source <- "UMZM, GBIF"
View(GBIF_in_UMZM)
df <- rbind.fill(GBIF_not_UMZM,GBIF_in_UMZM,UMZM_not_GBIF)
View(df)
temp <- duplicated(GBIF_in_UMZM$canonicalName)
temp <- GBIF_in_UMZM[which(duplicated(GBIF_in_UMZM$canonicalName)),]
View(temp)
write.csv(temp,"~/GitHub/tpt-acari/output/more_dupes.csv", row.names = FALSE)
write.csv(df,"~/GitHub/tpt-acari/output/acari_merged.csv", row.names = FALSE) # names in UMZM
# order column names
#df[,c(1,2,3,4)]. Note the first comma means keep all the rows, and the 1,2,3,4 refers to the columns.
df <- df[,c("source",
"taxonID",
"scientificNameID",
"acceptedNameUsageID",
"parentNameUsageID",
"originalNameUsageID",
"nameAccordingToID",
"namePublishedInID",
"taxonConceptID",
"scientificName",
"acceptedNameUsage",
"parentNameUsage",
"originalNameUsage",
"nameAccordingTo",
"namePublishedIn",
"namePublishedInYear",
"higherClassification",
"kingdom",
"phylum",
"class",
"subclass",
"superorder",
"order",
"suborder",
"infraorder",
"hyporder",
"superfamily",
"family",
"subfamily",
"tribe",
"subtribe",
"genus",
"subgenus",
"specificEpithet",
"infraspecificEpithet",
"taxonRank",
"verbatimTaxonRank",
"scientificNameAuthorship",
"vernacularName",
"nomenclaturalCode",
"taxonomicStatus",
"nomenclaturalStatus",
"taxonRemarks",
"canonicalName"
)]
write.csv(df,"~/GitHub/tpt-acari/output/acari_merged.csv", row.names = FALSE) # names in UMZM
View(UMZM_in_GBIF)
UMZM_in_GBIF$source <- "UMZM, GBIF"
df <- rbind.fill(GBIF_not_UMZM,UMZM_in_GBIF,UMZM_not_GBIF)
# order column names
#df[,c(1,2,3,4)]. Note the first comma means keep all the rows, and the 1,2,3,4 refers to the columns.
df <- df[,c("source",
"taxonID",
"scientificNameID",
"acceptedNameUsageID",
"parentNameUsageID",
"originalNameUsageID",
"nameAccordingToID",
"namePublishedInID",
"taxonConceptID",
"scientificName",
"acceptedNameUsage",
"parentNameUsage",
"originalNameUsage",
"nameAccordingTo",
"namePublishedIn",
"namePublishedInYear",
"higherClassification",
"kingdom",
"phylum",
"class",
"subclass",
"superorder",
"order",
"suborder",
"infraorder",
"hyporder",
"superfamily",
"family",
"subfamily",
"tribe",
"subtribe",
"genus",
"subgenus",
"specificEpithet",
"infraspecificEpithet",
"taxonRank",
"verbatimTaxonRank",
"scientificNameAuthorship",
"vernacularName",
"nomenclaturalCode",
"taxonomicStatus",
"nomenclaturalStatus",
"taxonRemarks",
"canonicalName"
)]
write.csv(df,"~/GitHub/tpt-acari/output/acari_merged.csv", row.names = FALSE) # names in UMZM
df <- df[
with(df, order(df$class, df$subclass, df$superorder, df$order, df$suborder, df$infraorder, df$hyporder, df$superfamily, df$family, df$subfamily, df$tribe, df$subtribe, df$genus, df$subgenus, df$specificEpithet, df$infraspecificEpithet)),
] # sort by taxonomic classes
View(df)
write.csv(df,"~/GitHub/tpt-acari/output/acari_merged.csv", row.names = FALSE) # names in UMZM
write.csv(df1,"~/GitHub/tpt-acari/output/Not in UMZM.csv", row.names = FALSE) # names not in Lewis
library(readxl)
library(data.table)
library(stringi)
library(plyr)
library(dplyr)
library(devtools)
library(taxotools)
# functions
# define function: name length
name_length <- function(x) ifelse(!is.na(x), length(unlist(strsplit(x, ' '))), 0)
# define function: is not in
'%!in%' <- function(x,y)!('%in%'(x,y))
# define function: right
right = function (string, char) {
substr(string,(unlist(lapply(gregexpr(pattern = char, string), min)) + 1),nchar(string))
}
# define function: left
left = function (string,char) {
substr(string,1,unlist(lapply(gregexpr(pattern = char, string), min)))
}
# define function: text to columns
text_to_columns <- function(dat, col, data="", column="", separator="", new_col_name_prefix="") { # dat is the data frame to operate on and col is the name of the column to be split
colno <- max(lengths(strsplit(col, separator))) # get max number of terms for any value in the column to be split
setDT(dat)[, paste0(new_col_name_prefix, 1:colno) := tstrsplit(col, separator)] # parse out terms into separate columns with column names prefixed with new_col_name_prefix plus consecutive numbers from 1 through colno
}
# function: remove '\xa0' chars
phrase_clean <- function(x) gsub("[\xA0]", "", x)
# function: replace double spaces with single spaces
space_clean <- function(x) gsub("  ", " ", x)
# function: get everything from INSIDE any parenthesis
inparens <- function(x)gsub("(?<=\\()[^()]*(?=\\))(*SKIP)(*F)|.", "", x, perl=T)
# function: get everything from OUTSIDE any parenthesis
outparens <- function(x){
trimws(gsub("\\([^()]*\\)", "", x))
}
# function: apply a function to ALL character columns
char_fun <- function(x,y){ # x = dataframe, y = function to apply
setDT(x)
cols_to_be_rectified <- names(x)[vapply(x, is.character, logical(1))]
x[,c(cols_to_be_rectified) := lapply(.SD, y), .SDcols = cols_to_be_rectified]
}
# define function VLOOKUP (x = return value dataframe and column,
# y = lookup value dataframe and column, z = lookup dataframe and column
# x and z should be from the same dataframe)
vlookup <- function(x,y,z){
x[match(y,z)]
}
# define DwC conversion
convert2DwC <- function(df_colname) {
x <- gsub('.*subspecies.*','infraspecificEpithet',df_colname)
x <- gsub('.*species.*', 'specificEpithet',x)
x <- gsub('.*rank.*','taxonRank',x)
x <- gsub('.*author.*','author',x)
x <- gsub('.*year.*','namePublishedInYear',x)
x <- gsub('.*scientific.*','scientificName',x)
x
}
# define function: get higher taxa with epithets
higher_taxa_epithet <- function(dat, sp, spp){ # data is data frame, sp is column where species is given, spp is column where subspecies is given
dat[which(lapply(sp, name_length) == 0 &
lapply(spp, name_length) == 0),] # keep names where species and subspecies are blank
}
# define function: get higher taxa with rank
higher_taxa_rank <- function(dat, rank){ # dat is data frame, rank is column where taxon rank is given
dat[which(rank != "species" & # remove taxa ranked species
rank != "subspecies"),] # remove taxa ranked subspecies
}
# define function: get species with epithet
species_epithet <- function(dat, sp, spp){ # data is data frame, sp is column where species is given, spp is column where subspecies is given
dat[which(lapply(spp, name_length) != 0 | # keep taxa with a subspecies name
lapply(sp, name_length) != 0),] # keep taxa with a species name
}
# define function: get species with rank
species_rank <- function(dat, col){ # data is dataframe, col is column where rank is given
df <- df[which(lapply(df$infraspecificEpithet, name_length) != 0 | lapply(df$specificEpithet, name_length) != 0),] # remove higher taxa from working file
dat[which(col == "species" | # keep taxa with rank species
col == "subspecies"),] # keep taxa ranked subspecies
}
# define function: find merge problems
merge_probs <- function(dat, datcol, taxocol, htcol){
not_in_taxo <- dat[datcol %!in% taxocol,] # get all rows in original data (dat) with (datcol) that does not match (taxocol)
problems <- not_in_taxo[not_in_taxo$taxonID %!in% htcol,] # get all rows in above that do not match  original higher geography (htcol)
}
rename_column <- function(dat,old,new,silent=FALSE){
if(old %in% colnames(dat)){
colnames(dat)[which(names(dat) == old)] <- new
} else {
if(!silent){
cat(paste("\nFieldname not found...",old))
}
}
return(dat)
}
# GBIF taxo conversion
GBIF <- read_excel("~/GitHub/tpt-acari/input/GBIF_acari.xlsx") # read in GBIF file
Ticks <- GBIF[which(GBIF$family == "Ixodidae"),] # ticks
df <- GBIF[which(GBIF$family != "Ixodidae"),] # remove ticks
View(Ticks)
df <- GBIF[which(GBIF$taxonID %!in% Ticks$taxonID),] # remove ticks
GBIF_origin <- df # keep original file for sanity check
tpt_dwc_template <- read_excel("input/tpt_dwc_template.xlsx") # read in TPT DarwinCore template
df <- rbindlist(list(df, tpt_dwc_template), fill = TRUE) # add all DwC columns
# ensure no NA in taxonomicStatus
for (i in 1:nrow(df)){
if (is.na(df$taxonomicStatus[i])) {
df$taxonomicStatus[i] <- "doubtful"
}
}
# add dataset for accepted taxa without one
for (i in 1:nrow(df)){
if (is.na(df$datasetID[i]) & df$taxonomicStatus[i] == "accepted") {
df$datasetID[i] <- "TPT"
}
}
# get accepted names
temp <- df[which(!is.na(df$acceptedNameUsageID)),] # get all rows with an accepted name ID
df <- df[which(is.na(df$acceptedNameUsageID)),] # remove rows with accepted name ID
for (i in 1:nrow(temp)){
temp$acceptedNameUsage[i] <- vlookup(df$canonicalName,temp$acceptedNameUsageID[i],df$taxonID) # get canonical name of matching taxon ID
}
df <- rbind(df,temp) # add back rows with accepted names
df_nodataset <- df[which(is.na(df$datasetID)),] # get taxa with no dataset ID
df_nodataset$reason <- "no dataset"
df <- df[which(!is.na(df$datasetID)),] # remove rows with no dataset ID
df_misapplied <- df[which(df$taxonomicStatus == "misapplied"),] # get taxa with taxonomic status of misapplied - what does that mean?
df_misapplied$reason <- "misapplied"
df <- df[which(df$taxonID %!in% df_misapplied$taxonID),] # remove rows with taxonomicStatus = misapplied - don't know how to treat
# check for duplicate names
df$reason <- c(ifelse(duplicated(df$scientificName, fromLast = TRUE)  | duplicated(df$scientificName),
"duplicate", NA)) # Flag internal dupes
df_dupes_review <- df[which(grepl('duplicate',df$reason) == TRUE), ]  # get duplicates for review
df <- df[which(grepl('duplicate',df$reason) == FALSE), ] # remove all dupes from working file
df_dupes_keep <- df_dupes_review[which(df_dupes_review$Dataset == "NEW"),]
df_dupes_keep <- df_dupes_keep[which(!duplicated(df_dupes_keep$canonicalName)),]
df_dupes <- df_dupes_review[which(df_dupes_review$taxonID %!in% df_dupes_keep$taxonID),]
df <- rbind(df, df_dupes_keep, fill=TRUE)
df_removed <- rbindlist(list(df_dupes, df_misapplied, df_nodataset), fill = TRUE)
df$source <- "GBIF"
# Do this after final review...
df_non_dwc <- subset(df, select = c(source, taxonID, Dataset, datasetID, genericName, reason)) # get all columns that are not DwC
# remove non DwC columns from working file
df$Dataset <- NULL
df$datasetID <- NULL
df$genericName <- NULL
df$reason <- NULL
# add subfamily column for consistency
df$subfamily <- NA
# order column names
# df[,c(1,2,3,4)]. Note the first comma means keep all the rows, and the 1,2,3,4 refers to the columns.
df <- df[,c("source",
"taxonID",
"scientificNameID",
"acceptedNameUsageID",
"parentNameUsageID",
"originalNameUsageID",
"nameAccordingToID",
"namePublishedInID",
"taxonConceptID",
"scientificName",
"acceptedNameUsage",
"parentNameUsage",
"originalNameUsage",
"nameAccordingTo",
"namePublishedIn",
"namePublishedInYear",
"higherClassification",
"kingdom",
"phylum",
"class",
"order",
"family",
"subfamily",
"genus",
"subgenus",
"specificEpithet",
"infraspecificEpithet",
"taxonRank",
"verbatimTaxonRank",
"scientificNameAuthorship",
"vernacularName",
"nomenclaturalCode",
"taxonomicStatus",
"nomenclaturalStatus",
"taxonRemarks",
"canonicalName"
)]
# sanity check
original <- nrow(GBIF_origin) # number of rows in cleaned file
final <- nrow(df) + nrow(df_removed) # number of rows in converted taxo file plus number of rows in higher taxa
if(original == final) {
write.csv(df,"~/GitHub/tpt-acari/output/GBIF_DwC.csv", row.names = FALSE) # write out transformed GBIF DwC
write.csv(df_removed,"~/GitHub/tpt-acari/output/GBIF_removed.csv", row.names = FALSE) # write out removed rows
write.csv(df_non_dwc,"~/GitHub/tpt-acari/output/GBIF_non_DwC.csv", row.names = FALSE) # write out removed rows
print("YAY")
} else {
print("rows are missing")
}
UMZM <- read.csv("~/GitHub/tpt-acari/output/Acari_DwC.csv", na = "NA") # read in cleaned Lewis review file
GBIF <- read.csv("~/GitHub/tpt-acari/output/GBIF_DwC.csv", na = "NA") # read in cleaned GBIF review file
# Names in sources other than UMZM
GBIF_not_UMZM <- GBIF[which(GBIF$canonicalName %!in% UMZM$canonicalName),]
df1 <- GBIF_not_UMZM # change dataframe name for ease of use
write.csv(GBIF_not_UMZM,"~/GitHub/tpt-acari/output/Not in UMZM.csv", row.names = FALSE) # names not in Lewis
UMZM_not_GBIF <- UMZM[which(UMZM$canonicalName %!in% GBIF$canonicalName),] # get names in UMZM but not GBIF
UMZM_in_GBIF <- UMZM[which(UMZM$canonicalName %in% GBIF$canonicalName),] # get names in UMZM and GBIF
UMZM_in_GBIF$source <- "UMZM, GBIF"
df <- rbind.fill(GBIF_not_UMZM,UMZM_in_GBIF,UMZM_not_GBIF)
# order column names
#df[,c(1,2,3,4)]. Note the first comma means keep all the rows, and the 1,2,3,4 refers to the columns.
df <- df[,c("source",
"taxonID",
"scientificNameID",
"acceptedNameUsageID",
"parentNameUsageID",
"originalNameUsageID",
"nameAccordingToID",
"namePublishedInID",
"taxonConceptID",
"scientificName",
"acceptedNameUsage",
"parentNameUsage",
"originalNameUsage",
"nameAccordingTo",
"namePublishedIn",
"namePublishedInYear",
"higherClassification",
"kingdom",
"phylum",
"class",
"subclass",
"superorder",
"order",
"suborder",
"infraorder",
"hyporder",
"superfamily",
"family",
"subfamily",
"tribe",
"subtribe",
"genus",
"subgenus",
"specificEpithet",
"infraspecificEpithet",
"taxonRank",
"verbatimTaxonRank",
"scientificNameAuthorship",
"vernacularName",
"nomenclaturalCode",
"taxonomicStatus",
"nomenclaturalStatus",
"taxonRemarks",
"canonicalName"
)]
df <- df[
with(df, order(df$class, df$subclass, df$superorder, df$order, df$suborder, df$infraorder, df$hyporder, df$superfamily, df$family, df$subfamily, df$tribe, df$subtribe, df$genus, df$subgenus, df$specificEpithet, df$infraspecificEpithet)),
] # sort by taxonomic classes
df <- df[
with(df, order(df$order, df$family, df$genus, df$subgenus, df$specificEpithet, df$infraspecificEpithet)),
] # sort by taxonomic classes
write.csv(df,"~/GitHub/tpt-acari/output/acari_merged.csv", row.names = FALSE) # names in UMZM
temp <- GBIF_in_UMZM[which(duplicated(GBIF_in_UMZM$canonicalName)),] # look for dup canonicals
